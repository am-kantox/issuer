["Issuer.CLI.IO.Gets#size/1": {56, nil}, "Issuer.CLI.IO.Gets#ask/1": {18, nil}, "Issuer.CLI.IO.Ncurses#size/1": {157, nil}, "Issuer.CLI.IO.Ncurses#refresh/1": {139, nil}, "Issuer.CLI.IO.Ncurses#ask/3": {41, nil}, "Issuer.CLI.Question#to_question/1": {2, "  Makes a question (`{title, choices, chosen}` tuple) to be asked via `Issuer.CLI.IO`\n"}, "Issuer.CLI.Question#impl_for!/1": {1, false}, "Issuer.CLI.Question#impl_for/1": {1, false}, "Issuer.CLI.Question.Issuer.CLI.Question.Input#to_question/2": {13, nil}, "Issuer.CLI.Question.Issuer.CLI.Question.Variant#to_question/2": {13, nil}, "Issuer.CLI.Question.Issuer.CLI.Question.Variants#to_question/2": {13, nil}, "Issuer.CLI.Question.Issuer.CLI.Question.YesNo#to_question/2": {8, nil}, "Issuer.Survey#survey!/1": {2, "  Performs a survey, asking questions and collection answers.\n"}, "Issuer.Survey#impl_for!/1": {1, false}, "Issuer.Survey#impl_for/1": {1, false}, "Issuer.Survey.Issuer.CLI.IO.Gets#survey!/1": {9, nil}, "Issuer.Survey.Issuer.CLI.IO.Ncurses#survey!/2": {17, nil}, "Issuer.Utils#version_valid?/1": {217, nil}, "Issuer.Utils#version_in_mix?/1": {227, nil}, "Issuer.Utils#version?/1": {179, nil}, "Issuer.Utils#version!/1": {163, nil}, "Issuer.Utils#unprefix_version/1": {210, nil}, "Issuer.Utils#sprouts/1": {9, "Returns “sprouts” for VCS tags. Those might be the the next version tag.\n\n    iex> [\"0.0.1\"] |> Issuer.Utils.sprouts\n    [\"0.0.2\", \"0.1.0\", \"0.1.0-dev\", \"0.1.0-rc.1\", \"1.0.0\", \"1.0.0-dev\", \"1.0.0-rc.1\"]\n\n    iex> [\"0.1.1-rc2\"] |> Issuer.Utils.sprouts\n    [\"0.1.1\", \"0.1.1-rc3\"]\n\n    iex> tags = [\"v1.4.0-rc.1\", \"v1.4.0-dev\",\n    ...> \"v1.3.3\", \"v1.3.2\", \"v1.3.1\", \"v1.3.0\", \"v1.3.0-rc.1\", \"v1.3.0-rc.0\", \"v1.2.6\",\n    ...> \"v1.2.5\", \"v1.2.4\", \"v1.2.3\", \"v1.2.2\", \"v1.2.1\", \"v1.2.0\", \"v1.2.0-rc.1\",\n    ...> \"v1.2.0-rc.0\", \"v1.1.1\", \"v1.1.0\", \"v1.1.0-rc.0\", \"v1.0.5\", \"v1.0.4\", \"v1.0.3\",\n    ...> \"v1.0.2\", \"v1.0.1\", \"v1.0.0\", \"v1.0.0-rc2\", \"v1.0.0-rc1\", \"v0.15.1\", \"v0.15.0\",\n    ...> \"v0.14.3\", \"v0.14.2\", \"v0.14.1\", \"v0.14.0\", \"v0.13.3\", \"v0.13.2\", \"v0.13.1\",\n    ...> \"v0.13.0\", \"v0.12.5\", \"v0.12.4\", \"v0.12.3\", \"v0.12.2\", \"v0.12.1\", \"v0.12.0\",\n    ...> \"v0.11.2\", \"v0.11.1\", \"v0.11.0\", \"v0.10.3\", \"v0.10.2\", \"v0.10.1\", \"v0.10.0\",\n    ...> \"v0.9.3\"]\n    ...> tags |> Issuer.Utils.sprouts\n    [\"v1.4.0\", \"v1.4.0-rc.2\", \"v1.3.4\", \"v2.0.0\", \"v0.15.2\", \"v0.16.0\", \"v1.0.0\"]\n"}, "Issuer.Utils#prefix_version/1": {200, nil}, "Issuer.Utils#modules!/0": {125, "\n## Examples\n\n    iex> Issuer.Utils.modules! |> List.last\n    Mix.Tasks.Issuer.Version\n"}, "Issuer.Utils#leaves/1": {43, "Returns “leaves” for VCS tags. Those might be the the next version tag.\nFor instance, current elixir git repo has these leaves:\n- `\"v0.15.1\"`\n- `\"v1.3.3\"`\n- `\"v1.4.0-rc.1\"`\n\nThe function will filter out all the existing tags to these:\n\n    iex> Issuer.Utils.leaves([]) |> Enum.count\n    1\n\n    iex> tags = [\"v1.4.0-rc.1\", \"v1.4.0-dev\",\n    ...> \"v1.3.3\", \"v1.3.2\", \"v1.3.1\", \"v1.3.0\", \"v1.3.0-rc.1\", \"v1.3.0-rc.0\", \"v1.2.6\",\n    ...> \"v1.2.5\", \"v1.2.4\", \"v1.2.3\", \"v1.2.2\", \"v1.2.1\", \"v1.2.0\", \"v1.2.0-rc.1\",\n    ...> \"v1.2.0-rc.0\", \"v1.1.1\", \"v1.1.0\", \"v1.1.0-rc.0\", \"v1.0.5\", \"v1.0.4\", \"v1.0.3\",\n    ...> \"v1.0.2\", \"v1.0.1\", \"v1.0.0\", \"v1.0.0-rc2\", \"v1.0.0-rc1\", \"v0.15.1\", \"v0.15.0\",\n    ...> \"v0.14.3\", \"v0.14.2\", \"v0.14.1\", \"v0.14.0\", \"v0.13.3\", \"v0.13.2\", \"v0.13.1\",\n    ...> \"v0.13.0\", \"v0.12.5\", \"v0.12.4\", \"v0.12.3\", \"v0.12.2\", \"v0.12.1\", \"v0.12.0\",\n    ...> \"v0.11.2\", \"v0.11.1\", \"v0.11.0\", \"v0.10.3\", \"v0.10.2\", \"v0.10.1\", \"v0.10.0\",\n    ...> \"v0.9.3\"]\n    ...> tags |> Issuer.Utils.leaves\n    [\"v1.4.0-rc.1\", \"v1.3.3\", \"v0.15.1\"]\n"}, "Issuer.Utils#interface_changes?/1": {91, nil}, "Issuer.Utils#interface_changes!/0": {99, nil}, "Issuer.Utils#functions!/0": {110, "\n## Examples\n\n    iex> with {name, _} <- Issuer.Utils.functions! |> List.last, do: name\n    :\"Mix.Tasks.Issuer.Version#run/1\"\n"}, "Issuer.Vcs#tags/1": {7, "  Lists tags for the repository given.\n"}, "Issuer.Vcs#tag!/2": {12, "  Adds a tag to the repo.\n"}, "Issuer.Vcs#status/1": {2, "  Returns a status of current git repository\n"}, "Issuer.Vcs#impl_for!/1": {1, false}, "Issuer.Vcs#impl_for/1": {1, false}, "Issuer.Vcs#commit!/2": {20, nil}, "Issuer.Vcs#add!/2": {25, nil}, "Issuer.Vcs.Issuer.Git#tags/1": {12, "  Lists tags for the repository given.\n"}, "Issuer.Vcs.Issuer.Git#tag!/2": {34, "  Adds a tag to the repo.\n"}, "Issuer.Vcs.Issuer.Git#status/1": {23, "  Returns a status of current git repository\n"}, "Issuer.Vcs.Issuer.Git#commit!/2": {54, "  Commits to the repo.\n"}, "Issuer.Vcs.Issuer.Git#add!/2": {47, nil}, "Mix.Tasks.Issuer#tests!/1": {35, nil}, "Mix.Tasks.Issuer#survey!/1": {65, nil}, "Mix.Tasks.Issuer#status!/1": {133, nil}, "Mix.Tasks.Issuer#run/1": {7, false}, "Mix.Tasks.Issuer#readme!/1": {104, nil}, "Mix.Tasks.Issuer#interfaces!/1": {96, nil}, "Mix.Tasks.Issuer#hex!/1": {145, nil}, "Mix.Tasks.Issuer#commit!/1": {122, nil}, "Mix.Tasks.Issuer#check_interface!/1": {45, nil}, "Mix.Tasks.Issuer.Version#run/1": {7, false}]